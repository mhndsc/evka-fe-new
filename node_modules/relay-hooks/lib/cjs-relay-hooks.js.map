{"version":3,"file":"cjs-relay-hooks.js","sources":["../src/ReactRelayContext.ts","../src/RelayHooksTypes.ts","../src/Utils.ts","../src/FetchResolver.ts","../src/QueryFetcher.ts","../src/useForceUpdate.ts","../src/useRelayEnvironment.ts","../src/useQuery.ts","../src/loadQuery.ts","../src/usePreloadedQuery.ts","../node_modules/tslib/tslib.es6.js","../src/getValueAtPath.ts","../src/getConnectionState.ts","../src/getRefetchMetadata.ts","../src/getPaginationMetadata.ts","../src/getPaginationVariables.ts","../src/FragmentResolver.ts","../src/useOssFragment.tsx","../src/useFragment.tsx","../src/useMutation.ts","../src/useSubscription.ts","../src/usePagination.ts","../src/useRefetchable.ts","../src/RelayEnvironmentProvider.tsx"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nimport * as React from 'react';\r\nimport { __internal } from 'relay-runtime';\r\n\r\nconst { createRelayContext } = __internal as any;\r\n\r\nexport const ReactRelayContext = createRelayContext(React);\r\n","import {\r\n    Disposable,\r\n    OperationType,\r\n    CacheConfig,\r\n    GraphQLTaggedNode,\r\n    IEnvironment,\r\n    MutationConfig as BaseMutationConfig,\r\n    MutationParameters,\r\n    FragmentSpecResolver,\r\n    VariablesOf,\r\n    FragmentReference,\r\n    RenderPolicy,\r\n    GraphQLSubscriptionConfig,\r\n} from 'relay-runtime';\r\n\r\nexport type MutationState<T extends MutationParameters> = {\r\n    loading: boolean;\r\n    data: T['response'] | null;\r\n    error?: Error | null;\r\n};\r\n\r\nexport type MutationNode<T extends MutationParameters> = BaseMutationConfig<T>['mutation'];\r\n\r\nexport type MutationConfig<T extends MutationParameters> = Partial<\r\n    Omit<BaseMutationConfig<T>, 'mutation' | 'onCompleted'>\r\n> & {\r\n    onCompleted?(response: T['response']): void;\r\n};\r\n\r\nexport type MutationConfigWithoutVariables<T extends MutationParameters> = Omit<\r\n    MutationConfig<T>,\r\n    'variables'\r\n>;\r\n\r\nexport type Mutate<T extends MutationParameters> = (\r\n    config?: Partial<MutationConfig<T>>,\r\n) => Promise<T['response']>;\r\n\r\nexport type MutateWithVariables<T extends MutationParameters> = (\r\n    config: Partial<MutationConfig<T>> & { variables: T['variables'] },\r\n) => Promise<T['response']>;\r\n\r\nexport const NETWORK_ONLY = 'network-only';\r\nexport const STORE_THEN_NETWORK = 'store-and-network';\r\nexport const STORE_OR_NETWORK = 'store-or-network';\r\nexport const STORE_ONLY = 'store-only';\r\n\r\nexport const PAGINATION_NAME = 'usePagination';\r\nexport const REFETCHABLE_NAME = 'useRefetchable';\r\nexport const FRAGMENT_NAME = 'useFragment';\r\n\r\nexport type FragmentNames = typeof PAGINATION_NAME | typeof REFETCHABLE_NAME | typeof FRAGMENT_NAME;\r\n\r\nexport type FetchPolicy =\r\n    | typeof STORE_ONLY\r\n    | typeof STORE_OR_NETWORK\r\n    | typeof STORE_THEN_NETWORK\r\n    | typeof NETWORK_ONLY;\r\n\r\nexport type ContainerResult = {\r\n    data: { [key: string]: any };\r\n    resolver: FragmentSpecResolver;\r\n};\r\n\r\nexport interface RenderProps<T extends OperationType> {\r\n    error: Error | null;\r\n    data: T['response'] | null | undefined;\r\n    retry: (_cacheConfigOverride?: CacheConfig, options?: Options) => void;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport type QueryOptions = {\r\n    fetchPolicy?: FetchPolicy;\r\n    fetchKey?: string | number;\r\n    networkCacheConfig?: CacheConfig;\r\n    skip?: boolean;\r\n    onComplete?: (_e: Error | null) => void;\r\n    UNSTABLE_renderPolicy?: RenderPolicy;\r\n};\r\n\r\nexport type $Call<Fn extends (...args: any[]) => any> = Fn extends (arg: any) => infer RT\r\n    ? RT\r\n    : never;\r\n\r\nexport type KeyType<TData = unknown> = Readonly<{\r\n    ' $data'?: TData;\r\n    ' $fragmentRefs': FragmentReference;\r\n}>;\r\nexport type ArrayKeyType = ReadonlyArray<{ readonly ' $data'?: ReadonlyArray<unknown> } | null>;\r\n\r\nexport type KeyTypeData<TKey extends KeyType<TData>, TData = unknown> = Required<TKey>[' $data'];\r\n\r\nexport type KeyReturnType<T extends KeyType> = (arg: T) => NonNullable<T[' $data']>;\r\nexport type ArrayKeyReturnType<T extends ArrayKeyType> = (\r\n    arg: T,\r\n) => NonNullable<NonNullable<T[0]>[' $data']>[0];\r\n\r\nexport type LoadMoreFn<TQuery extends OperationType = OperationType> = (\r\n    count: number,\r\n    options?: OptionsLoadMore<TQuery>,\r\n) => Disposable;\r\n\r\n// pagination\r\n\r\nexport const FORWARD = 'forward';\r\n\r\nexport type LoadQuery<\r\n    TOperationType extends OperationType = OperationType,\r\n    TEnvironment extends IEnvironment = IEnvironment\r\n> = {\r\n    next: (\r\n        environment: TEnvironment,\r\n        gqlQuery: GraphQLTaggedNode,\r\n        variables?: TOperationType['variables'],\r\n        options?: QueryOptions,\r\n    ) => Promise<void>;\r\n    subscribe: (callback: () => any) => () => void;\r\n    getValue: (environment?: TEnvironment) => RenderProps<TOperationType> | Promise<any>;\r\n    dispose: () => void;\r\n};\r\n\r\n// refetchable\r\n\r\nexport interface Options {\r\n    fetchPolicy?: FetchPolicy;\r\n    onComplete?: (arg: Error | null) => void;\r\n    UNSTABLE_renderPolicy?: RenderPolicy;\r\n}\r\n\r\nexport interface OptionsLoadMore<TQuery extends OperationType = OperationType> {\r\n    //fetchPolicy?: FetchPolicy;\r\n    onComplete?: (arg: Error | null) => void;\r\n    UNSTABLE_extraVariables?: VariablesOf<TQuery>;\r\n}\r\n\r\n// NOTE: RefetchFnDynamic returns a refetch function that:\r\n//  - Expects the /exact/ set of query variables if the provided key type is\r\n//    /nullable/.\r\n//  - Or, expects /a subset/ of the query variables if the provided key type is\r\n//    /non-null/.\r\nexport type RefetchFnDynamic<\r\n    TQuery extends OperationType,\r\n    TKey extends KeyType | null,\r\n    TOptions = Options\r\n> = RefetchInexactDynamicResponse<TQuery, TOptions> & RefetchExactDynamicResponse<TQuery, TOptions>;\r\n\r\nexport type RefetchInexact<TQuery extends OperationType, TOptions> = (\r\n    data?: unknown,\r\n) => RefetchFnInexact<TQuery, TOptions>;\r\nexport type RefetchInexactDynamicResponse<TQuery extends OperationType, TOptions> = ReturnType<\r\n    RefetchInexact<TQuery, TOptions>\r\n>;\r\n\r\nexport type RefetchExact<TQuery extends OperationType, TOptions> = (\r\n    data?: unknown | null,\r\n) => RefetchFnExact<TQuery, TOptions>;\r\nexport type RefetchExactDynamicResponse<TQuery extends OperationType, TOptions> = ReturnType<\r\n    RefetchExact<TQuery, TOptions>\r\n>;\r\n\r\nexport type RefetchFnBase<TVars, TOptions> = (vars: TVars, options?: TOptions) => Disposable;\r\n\r\nexport type RefetchFnExact<TQuery extends OperationType, TOptions = Options> = RefetchFnBase<\r\n    VariablesOf<TQuery>,\r\n    TOptions\r\n>;\r\nexport type RefetchFnInexact<TQuery extends OperationType, TOptions = Options> = RefetchFnBase<\r\n    Partial<VariablesOf<TQuery>>,\r\n    TOptions\r\n>;\r\n\r\nexport interface ReturnTypeRefetchNode<\r\n    TQuery extends OperationType,\r\n    TKey extends KeyType | null,\r\n    TFragmentData\r\n> extends ReturnTypeRefetchSuspenseNode<TQuery, TKey, TFragmentData> {\r\n    isLoading: boolean;\r\n    error: Error | null;\r\n}\r\n\r\nexport type ReturnTypeRefetchSuspenseNode<\r\n    TQuery extends OperationType,\r\n    TKey extends KeyType | null,\r\n    TFragmentData\r\n> = { data: TFragmentData; refetch: RefetchFnDynamic<TQuery, TKey> };\r\n\r\n// pagination\r\n\r\nexport interface ReturnTypePagination<\r\n    TQuery extends OperationType,\r\n    TKey extends KeyType | null,\r\n    TFragmentData\r\n> extends ReturnTypePaginationSuspense<TQuery, TKey, TFragmentData> {\r\n    isLoading: boolean;\r\n    error: Error | null;\r\n}\r\n\r\nexport interface ReturnTypePaginationSuspense<\r\n    TQuery extends OperationType,\r\n    TKey extends KeyType | null,\r\n    TFragmentData\r\n> {\r\n    data: TFragmentData;\r\n    loadNext: LoadMoreFn<TQuery>;\r\n    loadPrevious: LoadMoreFn<TQuery>;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n    isLoadingNext: boolean;\r\n    isLoadingPrevious: boolean;\r\n    errorNext: Error | null;\r\n    errorPrevious: Error | null;\r\n    refetch: RefetchFnDynamic<TQuery, TKey>;\r\n}\r\n\r\nexport type SubscriptionConfig = {\r\n    skip?: boolean;\r\n};\r\n\r\nexport type SkipSubscriptionConfig = {\r\n    skip: true;\r\n};\r\n\r\nexport interface SkipGraphQLSubscriptionConfig<TSubscription extends OperationType>\r\n    extends Omit<GraphQLSubscriptionConfig<TSubscription>, 'variables' | 'subscription'> {\r\n    subscription?: GraphQLSubscriptionConfig<TSubscription>['subscription'];\r\n    variables?: TSubscription['variables'];\r\n}\r\n","import {\r\n    Variables,\r\n    ConnectionMetadata,\r\n    createOperationDescriptor,\r\n    getRequest,\r\n    GraphQLTaggedNode,\r\n    OperationDescriptor,\r\n    CacheConfig,\r\n} from 'relay-runtime';\r\nimport { STORE_OR_NETWORK, STORE_THEN_NETWORK, NETWORK_ONLY, FetchPolicy } from './RelayHooksTypes';\r\n\r\nexport type ReactConnectionMetadata = ConnectionMetadata & { fragmentName: string };\r\n\r\nexport const isNetworkPolicy = (policy: FetchPolicy, full: boolean): boolean => {\r\n    return (\r\n        policy === NETWORK_ONLY ||\r\n        policy === STORE_THEN_NETWORK ||\r\n        (policy === STORE_OR_NETWORK && !full)\r\n    );\r\n};\r\n\r\nexport const isStorePolicy = (policy: FetchPolicy): boolean => {\r\n    return policy !== NETWORK_ONLY;\r\n};\r\n\r\nexport const forceCache = { force: true };\r\n\r\n// Fetcher\r\nexport function createOperation(\r\n    gqlQuery: GraphQLTaggedNode,\r\n    variables: Variables,\r\n    cacheConfig?: CacheConfig | null,\r\n): OperationDescriptor {\r\n    return createOperationDescriptor(getRequest(gqlQuery), variables, cacheConfig);\r\n}\r\n","import {\r\n    __internal,\r\n    Disposable,\r\n    FetchPolicy,\r\n    Subscription,\r\n    OperationDescriptor,\r\n    IEnvironment,\r\n    Snapshot,\r\n    RenderPolicy,\r\n} from 'relay-runtime';\r\nimport { isNetworkPolicy, isStorePolicy } from './Utils';\r\nconst { fetchQuery } = __internal;\r\nconst DATA_RETENTION_TIMEOUT = 30 * 1000;\r\n\r\nexport type Fetcher = {\r\n    fetch: (\r\n        environment: IEnvironment,\r\n        operation: OperationDescriptor,\r\n        fetchPolicy: FetchPolicy | null | undefined,\r\n        onComplete: (_e: Error | null) => void,\r\n        onNext: (\r\n            operation: OperationDescriptor,\r\n            snapshot: Snapshot,\r\n            fromStore?: boolean,\r\n            onlyStore?: boolean,\r\n        ) => void,\r\n        renderPolicy?: RenderPolicy,\r\n    ) => Disposable;\r\n    getData: () => {\r\n        isLoading: boolean;\r\n        error?: Error | null;\r\n    };\r\n    dispose: () => void;\r\n    checkAndSuspense: (suspense: boolean, useLazy?: boolean) => Promise<any> | Error | null;\r\n};\r\n\r\nexport function fetchResolver({\r\n    setLoading,\r\n    doRetain = true,\r\n    disposeTemporary,\r\n}: {\r\n    doRetain?: boolean;\r\n    setLoading?: (loading: boolean) => void;\r\n    disposeTemporary?: () => void;\r\n}): Fetcher {\r\n    let _refetchSubscription: Subscription | null = null;\r\n    let disposable: Disposable | null = null;\r\n    let releaseQueryTimeout;\r\n    let isLoading = false;\r\n    let query;\r\n    let promise: Promise<any>;\r\n    let error: Error | null = null;\r\n    let env;\r\n\r\n    const updateLoading = (loading: boolean): void => {\r\n        isLoading = loading;\r\n        setLoading && setLoading(isLoading);\r\n    };\r\n    const lookupInStore = (\r\n        environment: IEnvironment,\r\n        operation,\r\n        fetchPolicy,\r\n        renderPolicy: RenderPolicy,\r\n    ): { snapshot: Snapshot | null; full: boolean } => {\r\n        if (isStorePolicy(fetchPolicy)) {\r\n            const check = environment.check(operation);\r\n            const queryStatus = check.status;\r\n            const hasFullQuery = queryStatus === 'available';\r\n            const canPartialRender =\r\n                hasFullQuery || (renderPolicy === 'partial' && queryStatus !== 'stale');\r\n            if (canPartialRender) {\r\n                return { snapshot: environment.lookup(operation.fragment), full: hasFullQuery };\r\n            }\r\n        }\r\n        return { snapshot: null, full: false };\r\n    };\r\n\r\n    const dispose = (): void => {\r\n        clearTemporaryRetain();\r\n        disposable && disposable.dispose();\r\n        disposeRequest();\r\n        disposable = null;\r\n        env = null;\r\n        query = null;\r\n    };\r\n\r\n    const clearTemporaryRetain = (): void => {\r\n        clearTimeout(releaseQueryTimeout);\r\n        releaseQueryTimeout = null;\r\n    };\r\n\r\n    const temporaryRetain = (): void => {\r\n        const localReleaseTemporaryRetain = (): void => {\r\n            clearTemporaryRetain();\r\n            dispose();\r\n            disposeTemporary && disposeTemporary();\r\n        };\r\n        releaseQueryTimeout = setTimeout(localReleaseTemporaryRetain, DATA_RETENTION_TIMEOUT);\r\n    };\r\n\r\n    const disposeRequest = (): void => {\r\n        _refetchSubscription && _refetchSubscription.unsubscribe();\r\n        error = null;\r\n    };\r\n\r\n    const fetch = (\r\n        environment: IEnvironment,\r\n        operation: OperationDescriptor,\r\n        fetchPolicy: FetchPolicy = 'network-only',\r\n        onComplete = (_e: Error | null): void => undefined,\r\n        onNext: (\r\n            operation: OperationDescriptor,\r\n            snapshot: Snapshot,\r\n            fromStore?: boolean,\r\n            onlyStore?: boolean,\r\n        ) => void,\r\n        renderPolicy?: RenderPolicy,\r\n    ): Disposable => {\r\n        if (env != environment || query.request.identifier !== operation.request.identifier) {\r\n            dispose();\r\n            if (doRetain) {\r\n                disposable = environment.retain(operation);\r\n            }\r\n        }\r\n        env = environment;\r\n        query = operation;\r\n\r\n        disposeRequest();\r\n        const { snapshot, full } = lookupInStore(environment, operation, fetchPolicy, renderPolicy);\r\n        const isNetwork = isNetworkPolicy(fetchPolicy, full);\r\n        if (snapshot != null) {\r\n            const onlyStore = !isNetwork;\r\n            onNext(operation, snapshot, true, onlyStore);\r\n            if (onlyStore) {\r\n                onComplete(null);\r\n            }\r\n        }\r\n        // Cancel any previously running refetch.\r\n        _refetchSubscription && _refetchSubscription.unsubscribe();\r\n        if (isNetwork) {\r\n            let resolveNetworkPromise = (): void => {};\r\n\r\n            // Declare refetchSubscription before assigning it in .start(), since\r\n            // synchronous completion may call callbacks .subscribe() returns.\r\n            let refetchSubscription: Subscription;\r\n            const cleanup = (): void => {\r\n                if (_refetchSubscription === refetchSubscription) {\r\n                    _refetchSubscription = null;\r\n                }\r\n                isLoading = false;\r\n                promise = null;\r\n            };\r\n\r\n            fetchQuery(environment, operation).subscribe({\r\n                unsubscribe: (): void => {\r\n                    cleanup();\r\n                },\r\n                complete: (): void => {\r\n                    resolveNetworkPromise();\r\n                    updateLoading(false);\r\n                    cleanup();\r\n                    onComplete(null);\r\n                },\r\n                error: (e: Error): void => {\r\n                    error = e;\r\n                    resolveNetworkPromise();\r\n                    updateLoading(false);\r\n                    cleanup();\r\n                    onComplete(e);\r\n                },\r\n                next: () => {\r\n                    const store = environment.lookup(operation.fragment);\r\n                    promise = null;\r\n                    operation.request.cacheConfig?.poll && updateLoading(false);\r\n                    resolveNetworkPromise();\r\n                    onNext(operation, store);\r\n                },\r\n                start: (subscription) => {\r\n                    refetchSubscription = subscription;\r\n                    _refetchSubscription = refetchSubscription;\r\n                    updateLoading(true);\r\n                },\r\n            });\r\n            if (!snapshot) {\r\n                promise = new Promise((resolve: any) => {\r\n                    resolveNetworkPromise = resolve;\r\n                });\r\n            }\r\n            return {\r\n                dispose: (): void => {\r\n                    refetchSubscription && refetchSubscription.unsubscribe();\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            dispose: (): void => {},\r\n        };\r\n    };\r\n\r\n    const checkAndSuspense = (suspense, useLazy): Promise<any> | Error | null => {\r\n        clearTemporaryRetain();\r\n        const toThrow = promise || error;\r\n        if (suspense && toThrow) {\r\n            if (promise && useLazy) {\r\n                temporaryRetain();\r\n            }\r\n            throw toThrow;\r\n        }\r\n        return toThrow;\r\n    };\r\n\r\n    const getData = (): {\r\n        isLoading: boolean;\r\n        error?: Error | null;\r\n    } => {\r\n        return {\r\n            isLoading,\r\n            error,\r\n        };\r\n    };\r\n\r\n    return {\r\n        fetch,\r\n        getData,\r\n        dispose,\r\n        checkAndSuspense,\r\n    };\r\n}\r\n","import * as areEqual from 'fbjs/lib/areEqual';\r\nimport {\r\n    Disposable,\r\n    CacheConfig,\r\n    IEnvironment,\r\n    Snapshot,\r\n    OperationType,\r\n    OperationDescriptor,\r\n    GraphQLTaggedNode,\r\n    Variables,\r\n} from 'relay-runtime';\r\nimport { Fetcher, fetchResolver } from './FetchResolver';\r\nimport { FetchPolicy, RenderProps, QueryOptions, Options } from './RelayHooksTypes';\r\nimport { createOperation } from './Utils';\r\n\r\nconst defaultPolicy = 'store-or-network';\r\n\r\nconst cache: Map<string, QueryFetcher<any>> = new Map();\r\n\r\nexport function getOrCreateQueryFetcher<TOperationType extends OperationType>(\r\n    useLazy: boolean,\r\n    gqlQuery: GraphQLTaggedNode,\r\n    variables: TOperationType['variables'],\r\n    networkCacheConfig: CacheConfig,\r\n): QueryFetcher<TOperationType> {\r\n    const query = createOperation(gqlQuery, variables, networkCacheConfig);\r\n    const toGet = useLazy && cache.has(query.request.identifier);\r\n    const queryFetcher = toGet ? cache.get(query.request.identifier) : new QueryFetcher();\r\n    queryFetcher.setQuery(gqlQuery, variables, networkCacheConfig, query);\r\n    return queryFetcher;\r\n}\r\n\r\nconst emptyforceUpdate = (): void => undefined;\r\n\r\nexport class QueryFetcher<TOperationType extends OperationType = OperationType> {\r\n    environment: IEnvironment;\r\n    query: OperationDescriptor;\r\n    fetcher: Fetcher;\r\n    rootSubscription: Disposable;\r\n    snapshot: Snapshot;\r\n    fetchPolicy: FetchPolicy;\r\n    fetchKey: string | number;\r\n    variables: Variables;\r\n    cacheConfig: Variables;\r\n    gqlQuery: GraphQLTaggedNode;\r\n    options: QueryOptions;\r\n    forceUpdate = emptyforceUpdate;\r\n    result: RenderProps<TOperationType> = null;\r\n    skip?: boolean;\r\n\r\n    constructor() {\r\n        this.result = {\r\n            retry: this.retry,\r\n            error: null,\r\n            data: null,\r\n            isLoading: false,\r\n        };\r\n        this.fetcher = fetchResolver({\r\n            disposeTemporary: () => {\r\n                this.dispose();\r\n                this.query && cache.delete(this.query.request.identifier);\r\n            },\r\n        });\r\n    }\r\n\r\n    setQuery(\r\n        gqlQuery: GraphQLTaggedNode,\r\n        variables: TOperationType['variables'],\r\n        networkCacheConfig: CacheConfig,\r\n        query: OperationDescriptor,\r\n    ): void {\r\n        this.gqlQuery = gqlQuery;\r\n        this.variables = variables;\r\n        this.query = query;\r\n        this.cacheConfig = networkCacheConfig;\r\n    }\r\n\r\n    getForceUpdate(): () => void {\r\n        return this.forceUpdate;\r\n    }\r\n\r\n    setForceUpdate(forceUpdate): void {\r\n        this.forceUpdate = forceUpdate;\r\n    }\r\n\r\n    dispose(): void {\r\n        this.fetcher.dispose();\r\n        this.disposeSnapshot();\r\n    }\r\n\r\n    disposeSnapshot(): void {\r\n        this.snapshot = null;\r\n        if (this.rootSubscription) {\r\n            this.rootSubscription.dispose();\r\n            this.rootSubscription = null;\r\n        }\r\n    }\r\n\r\n    retry = (cacheConfigOverride?: CacheConfig | null, options: Options = {}): void => {\r\n        const { fetchPolicy = 'network-only' } = options;\r\n        /* eslint-disable indent */\r\n        const query = cacheConfigOverride\r\n            ? createOperation(\r\n                  this.query.request.node,\r\n                  this.query.request.variables,\r\n                  cacheConfigOverride,\r\n              )\r\n            : this.query;\r\n        this.fetch(query, fetchPolicy, options);\r\n        this.resolveResult();\r\n        this.forceUpdate();\r\n    };\r\n\r\n    fetch(\r\n        query: OperationDescriptor,\r\n        fetchPolicy: FetchPolicy,\r\n        options: Options,\r\n        skip?: boolean,\r\n    ): void {\r\n        this.disposeSnapshot();\r\n        if (skip) {\r\n            this.fetcher.dispose();\r\n            return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/camelcase\r\n        const { onComplete } = options;\r\n        let fetchHasReturned = false;\r\n        const onNext = (_o: OperationDescriptor, snapshot: Snapshot): void => {\r\n            if (!this.snapshot) {\r\n                this.snapshot = snapshot;\r\n                this.subscribe(snapshot);\r\n                this.resolveResult();\r\n                if (fetchHasReturned) {\r\n                    this.forceUpdate();\r\n                }\r\n            }\r\n        };\r\n        const complete = (error: Error | null): void => {\r\n            this.resolveResult();\r\n            if (fetchHasReturned) {\r\n                this.forceUpdate();\r\n            }\r\n            onComplete && onComplete(error);\r\n        };\r\n        this.fetcher.fetch(this.environment, query, fetchPolicy, complete, onNext);\r\n        fetchHasReturned = true;\r\n    }\r\n\r\n    getQuery(gqlQuery, variables, networkCacheConfig): OperationDescriptor | null {\r\n        if (\r\n            gqlQuery != this.gqlQuery ||\r\n            networkCacheConfig != this.cacheConfig ||\r\n            variables != this.variables ||\r\n            !areEqual(variables, this.variables)\r\n        ) {\r\n            this.variables = variables;\r\n            this.gqlQuery = gqlQuery;\r\n            this.cacheConfig = networkCacheConfig;\r\n            return createOperation(gqlQuery, variables, networkCacheConfig);\r\n        }\r\n        return this.query;\r\n    }\r\n\r\n    resolveEnvironment(environment: IEnvironment): void {\r\n        this.resolve(environment, this.gqlQuery, this.variables, this.options);\r\n    }\r\n\r\n    resolve(\r\n        environment: IEnvironment,\r\n        gqlQuery: GraphQLTaggedNode,\r\n        variables: Variables,\r\n        options: QueryOptions,\r\n    ): void {\r\n        const query = this.getQuery(gqlQuery, variables, options.networkCacheConfig);\r\n        const { fetchPolicy = defaultPolicy, fetchKey, skip } = options;\r\n        this.options = options;\r\n        const diffQuery = !this.query || query.request.identifier !== this.query.request.identifier;\r\n        if (\r\n            diffQuery ||\r\n            environment !== this.environment ||\r\n            fetchPolicy !== this.fetchPolicy ||\r\n            fetchKey !== this.fetchKey ||\r\n            skip !== this.skip\r\n        ) {\r\n            this.environment = environment;\r\n            this.query = query;\r\n            this.skip = skip;\r\n            this.fetchPolicy = fetchPolicy;\r\n            this.fetchKey = fetchKey;\r\n            this.fetch(query, fetchPolicy, options, skip);\r\n            this.resolveResult();\r\n        }\r\n    }\r\n\r\n    checkAndSuspense(suspense?: boolean, useLazy?: boolean): Promise<any> | Error | null {\r\n        if (useLazy) {\r\n            this.setForceUpdate(emptyforceUpdate);\r\n            cache.set(this.query.request.identifier, this);\r\n        }\r\n        const result = this.fetcher.checkAndSuspense(suspense, useLazy);\r\n        if (useLazy) {\r\n            cache.delete(this.query.request.identifier);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getData(): RenderProps<TOperationType> {\r\n        return this.result;\r\n    }\r\n\r\n    resolveResult(): void {\r\n        const { error, isLoading } = this.fetcher.getData();\r\n        this.result = {\r\n            retry: this.retry,\r\n            error,\r\n            data: this.snapshot ? this.snapshot.data : null,\r\n            isLoading,\r\n        };\r\n    }\r\n\r\n    subscribe(snapshot): void {\r\n        if (this.rootSubscription) {\r\n            this.rootSubscription.dispose();\r\n        }\r\n        this.rootSubscription = this.environment.subscribe(snapshot, (snapshot) => {\r\n            // Read from this._fetchOptions in case onDataChange() was lazily added.\r\n            this.snapshot = snapshot;\r\n            //this.error = null;\r\n\r\n            this.resolveResult();\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n}\r\n","import { Reducer, useReducer } from 'react';\r\n\r\nexport function useForceUpdate(): () => void {\r\n    const [, forceUpdate] = useReducer<Reducer<number, void>>((x) => x + 1, 0);\r\n    return forceUpdate as () => void;\r\n}\r\n","import * as React from 'react';\r\nimport { IEnvironment } from 'relay-runtime';\r\nimport { ReactRelayContext } from './ReactRelayContext';\r\n\r\nexport function useRelayEnvironment<\r\n    TEnvironment extends IEnvironment = IEnvironment\r\n>(): TEnvironment {\r\n    const { environment } = React.useContext(ReactRelayContext);\r\n    return environment;\r\n}\r\n","import { useRef, useEffect } from 'react';\r\nimport { GraphQLTaggedNode, OperationType } from 'relay-runtime';\r\nimport { getOrCreateQueryFetcher, QueryFetcher } from './QueryFetcher';\r\nimport { RenderProps, QueryOptions } from './RelayHooksTypes';\r\nimport { useForceUpdate } from './useForceUpdate';\r\nimport { useRelayEnvironment } from './useRelayEnvironment';\r\nimport { forceCache } from './Utils';\r\n\r\ntype Reference<TOperationType extends OperationType = OperationType> = {\r\n    queryFetcher: QueryFetcher<TOperationType>;\r\n};\r\n\r\nconst useInternalQuery = <TOperationType extends OperationType = OperationType>(\r\n    gqlQuery: GraphQLTaggedNode,\r\n    variables: TOperationType['variables'],\r\n    options: QueryOptions,\r\n    suspense: boolean,\r\n): RenderProps<TOperationType> => {\r\n    const environment = useRelayEnvironment();\r\n    const forceUpdate = useForceUpdate();\r\n    const ref = useRef<Reference<TOperationType>>();\r\n    if (ref.current === null || ref.current === undefined) {\r\n        ref.current = {\r\n            queryFetcher: getOrCreateQueryFetcher(\r\n                suspense,\r\n                gqlQuery,\r\n                variables,\r\n                options.networkCacheConfig,\r\n            ),\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (): void => ref.current.queryFetcher.dispose();\r\n    }, []);\r\n\r\n    const { queryFetcher } = ref.current;\r\n    queryFetcher.resolve(environment, gqlQuery, variables, options);\r\n    queryFetcher.checkAndSuspense(suspense, suspense);\r\n    queryFetcher.setForceUpdate(forceUpdate);\r\n    return queryFetcher.getData();\r\n};\r\n\r\nexport const useQuery = <TOperationType extends OperationType = OperationType>(\r\n    gqlQuery: GraphQLTaggedNode,\r\n    variables: TOperationType['variables'] = {},\r\n    options: QueryOptions = {},\r\n): RenderProps<TOperationType> => {\r\n    return useInternalQuery(gqlQuery, variables, options, false);\r\n};\r\n\r\nexport const useLazyLoadQuery = <TOperationType extends OperationType = OperationType>(\r\n    gqlQuery: GraphQLTaggedNode,\r\n    variables: TOperationType['variables'] = {},\r\n    options: QueryOptions = {},\r\n): RenderProps<TOperationType> => {\r\n    options.networkCacheConfig = options.networkCacheConfig ?? forceCache;\r\n    return useInternalQuery(gqlQuery, variables, options, true);\r\n};\r\n","import { GraphQLTaggedNode, OperationType, IEnvironment } from 'relay-runtime';\r\nimport { QueryFetcher } from './QueryFetcher';\r\nimport { RenderProps, QueryOptions, LoadQuery } from './RelayHooksTypes';\r\nimport { forceCache } from './Utils';\r\n\r\nconst emptyFunction = (): void => undefined;\r\n\r\nexport const internalLoadQuery = <TOperationType extends OperationType = OperationType>(\r\n    promise = false,\r\n): LoadQuery<TOperationType> => {\r\n    let queryFetcher = new QueryFetcher<TOperationType>();\r\n\r\n    const dispose = (): void => {\r\n        queryFetcher.dispose();\r\n        queryFetcher.setForceUpdate(emptyFunction);\r\n        queryFetcher = new QueryFetcher<TOperationType>();\r\n    };\r\n\r\n    const next = (\r\n        environment,\r\n        gqlQuery: GraphQLTaggedNode,\r\n        variables: TOperationType['variables'] = {},\r\n        options: QueryOptions = {},\r\n    ): Promise<void> => {\r\n        options.networkCacheConfig = options.networkCacheConfig ?? forceCache;\r\n        queryFetcher.resolve(environment, gqlQuery, variables, options);\r\n        const toThrow = queryFetcher.checkAndSuspense();\r\n        return toThrow\r\n            ? toThrow instanceof Error\r\n                ? Promise.reject(toThrow)\r\n                : toThrow\r\n            : Promise.resolve();\r\n    };\r\n\r\n    const getValue = (\r\n        environment?: IEnvironment,\r\n    ): RenderProps<TOperationType> | null | Promise<any> => {\r\n        queryFetcher.resolveEnvironment(environment);\r\n        queryFetcher.checkAndSuspense(promise);\r\n        return queryFetcher.getData();\r\n    };\r\n\r\n    const subscribe = (callback: () => any): (() => void) => {\r\n        queryFetcher.setForceUpdate(callback);\r\n        return (): void => {\r\n            if (queryFetcher.getForceUpdate() === callback) {\r\n                queryFetcher.setForceUpdate(emptyFunction);\r\n            }\r\n        };\r\n    };\r\n    return {\r\n        next,\r\n        subscribe,\r\n        getValue,\r\n        dispose,\r\n    };\r\n};\r\n\r\nexport const loadLazyQuery = <\r\n    TOperationType extends OperationType = OperationType\r\n>(): LoadQuery<TOperationType> => {\r\n    return internalLoadQuery(true);\r\n};\r\n\r\nexport const loadQuery = <\r\n    TOperationType extends OperationType = OperationType\r\n>(): LoadQuery<TOperationType> => {\r\n    return internalLoadQuery(false);\r\n};\r\n","import { useEffect } from 'react';\r\nimport { OperationType } from 'relay-runtime';\r\nimport { RenderProps, LoadQuery } from './RelayHooksTypes';\r\nimport { useForceUpdate } from './useForceUpdate';\r\nimport { useRelayEnvironment } from './useRelayEnvironment';\r\n\r\nexport const usePreloadedQuery = <TOperationType extends OperationType = OperationType>(\r\n    loadQuery: LoadQuery,\r\n): RenderProps<TOperationType> => {\r\n    const forceUpdate = useForceUpdate();\r\n    const environment = useRelayEnvironment();\r\n\r\n    useEffect(() => {\r\n        return loadQuery.subscribe(forceUpdate);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loadQuery]);\r\n\r\n    return loadQuery.getValue(environment) as RenderProps<TOperationType>;\r\n};\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as invariant from 'fbjs/lib/invariant';\r\n\r\nexport function getValueAtPath(data: any, path: ReadonlyArray<string | number>): any {\r\n    let result = data;\r\n    for (const key of path) {\r\n        if (result == null) {\r\n            return null;\r\n        }\r\n        if (typeof key === 'number') {\r\n            invariant(\r\n                Array.isArray(result),\r\n                'Relay: Expected an array when extracting value at path. ' +\r\n                    \"If you're seeing this, this is likely a bug in Relay.\",\r\n            );\r\n            result = result[key];\r\n        } else {\r\n            invariant(\r\n                typeof result === 'object' && !Array.isArray(result),\r\n                'Relay: Expected an object when extracting value at path. ' +\r\n                    \"If you're seeing this, this is likely a bug in Relay.\",\r\n            );\r\n            result = result[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","import * as invariant from 'fbjs/lib/invariant';\r\nimport { ConnectionInterface, ReaderFragment } from 'relay-runtime';\r\nimport { getValueAtPath } from './getValueAtPath';\r\n\r\nexport function getStateFromConnection(\r\n    direction: string,\r\n    fragmentNode: ReaderFragment,\r\n    connection: any | null,\r\n): {\r\n    cursor: string | null;\r\n    hasMore: boolean;\r\n} {\r\n    if (connection == null) {\r\n        return { cursor: null, hasMore: false };\r\n    }\r\n    const {\r\n        EDGES,\r\n        PAGE_INFO,\r\n        HAS_NEXT_PAGE,\r\n        HAS_PREV_PAGE,\r\n        END_CURSOR,\r\n        START_CURSOR,\r\n    } = ConnectionInterface.get();\r\n\r\n    invariant(\r\n        typeof connection === 'object',\r\n        'Relay: Expected connection in fragment `%s` to have been `null`, or ' +\r\n            'a plain object with %s and %s properties. Instead got `%s`.',\r\n        fragmentNode.name,\r\n        EDGES,\r\n        PAGE_INFO,\r\n        connection,\r\n    );\r\n\r\n    const edges = connection[EDGES];\r\n    const pageInfo = connection[PAGE_INFO];\r\n    if (edges == null || pageInfo == null) {\r\n        return { cursor: null, hasMore: false };\r\n    }\r\n\r\n    invariant(\r\n        Array.isArray(edges),\r\n        'Relay: Expected connection in fragment `%s` to have a plural `%s` field. ' +\r\n            'Instead got `%s`.',\r\n        fragmentNode.name,\r\n        EDGES,\r\n        edges,\r\n    );\r\n    invariant(\r\n        typeof pageInfo === 'object',\r\n        'Relay: Expected connection in fragment `%s` to have a `%s` field. ' + 'Instead got `%s`.',\r\n        fragmentNode.name,\r\n        PAGE_INFO,\r\n        pageInfo,\r\n    );\r\n\r\n    const cursor =\r\n        direction === 'forward' ? pageInfo[END_CURSOR] ?? null : pageInfo[START_CURSOR] ?? null;\r\n    invariant(\r\n        cursor === null || typeof cursor === 'string',\r\n        'Relay: Expected page info for connection in fragment `%s` to have a ' +\r\n            'valid `%s`. Instead got `%s`.',\r\n        fragmentNode.name,\r\n        START_CURSOR,\r\n        cursor,\r\n    );\r\n\r\n    let hasMore;\r\n    if (direction === 'forward') {\r\n        hasMore = cursor != null && pageInfo[HAS_NEXT_PAGE] === true;\r\n    } else {\r\n        hasMore = cursor != null && pageInfo[HAS_PREV_PAGE] === true;\r\n    }\r\n\r\n    return { cursor, hasMore };\r\n}\r\n\r\nexport function getConnectionState(\r\n    direction: string,\r\n    fragmentNode: ReaderFragment,\r\n    fragmentData: any,\r\n    connectionPathInFragmentData: ReadonlyArray<string | number>,\r\n): {\r\n    cursor: string | null;\r\n    hasMore: boolean;\r\n} {\r\n    const connection = getValueAtPath(fragmentData, connectionPathInFragmentData);\r\n    return getStateFromConnection(direction, fragmentNode, connection);\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @emails oncall+relay\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n// flowlint ambiguous-object-type:error\r\n\r\n'use strict';\r\n\r\nimport * as invariant from 'fbjs/lib/invariant';\r\n\r\nimport { ConcreteRequest, ReaderFragment, ReaderRefetchMetadata } from 'relay-runtime';\r\n\r\nexport function getRefetchMetadata(\r\n    fragmentNode: ReaderFragment,\r\n    componentDisplayName: string,\r\n): {\r\n    fragmentRefPathInResponse: ReadonlyArray<string | number>;\r\n    identifierField: string | null;\r\n    refetchableRequest: ConcreteRequest;\r\n    refetchMetadata: ReaderRefetchMetadata;\r\n} {\r\n    invariant(\r\n        fragmentNode.metadata?.plural !== true,\r\n        'Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using ' +\r\n            '`%s`. Remove `@relay(plural: true)` from fragment `%s` ' +\r\n            'in order to use it with `%s`.',\r\n        fragmentNode.name,\r\n        componentDisplayName,\r\n        fragmentNode.name,\r\n        componentDisplayName,\r\n    );\r\n\r\n    const refetchMetadata = fragmentNode.metadata?.refetch;\r\n    invariant(\r\n        refetchMetadata != null,\r\n        'Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. ' +\r\n            'Did you forget to add a @refetchable directive to the fragment?',\r\n        componentDisplayName,\r\n        fragmentNode.name,\r\n    );\r\n\r\n    // handle both commonjs and es modules\r\n    const refetchableRequest: ConcreteRequest = (refetchMetadata as any).operation.default\r\n        ? (refetchMetadata as any).operation.default\r\n        : refetchMetadata.operation;\r\n    const fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;\r\n    invariant(\r\n        typeof refetchableRequest !== 'string',\r\n        'Relay: getRefetchMetadata(): Expected refetch query to be an ' +\r\n            \"operation and not a string when using `%s`. If you're seeing this, \" +\r\n            'this is likely a bug in Relay.',\r\n        componentDisplayName,\r\n    );\r\n    const identifierField = refetchMetadata.identifierField;\r\n    invariant(\r\n        identifierField == null || typeof identifierField === 'string',\r\n        'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.',\r\n    );\r\n    return {\r\n        fragmentRefPathInResponse,\r\n        identifierField,\r\n        refetchableRequest,\r\n        refetchMetadata,\r\n    };\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @emails oncall+relay\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n// flowlint ambiguous-object-type:error\r\n\r\n'use strict';\r\n\r\nimport * as invariant from 'fbjs/lib/invariant';\r\n\r\nimport { ConcreteRequest, ReaderFragment, ReaderPaginationMetadata } from 'relay-runtime';\r\nimport { getRefetchMetadata } from './getRefetchMetadata';\r\n\r\nexport function getPaginationMetadata(\r\n    fragmentNode: ReaderFragment,\r\n    componentDisplayName: string,\r\n): {\r\n    connectionPathInFragmentData: ReadonlyArray<string | number>;\r\n    identifierField: string | null;\r\n    paginationRequest: ConcreteRequest;\r\n    paginationMetadata: ReaderPaginationMetadata;\r\n    stream: boolean;\r\n} {\r\n    const { refetchableRequest: paginationRequest, refetchMetadata } = getRefetchMetadata(\r\n        fragmentNode,\r\n        componentDisplayName,\r\n    );\r\n\r\n    const paginationMetadata = refetchMetadata.connection;\r\n    invariant(\r\n        paginationMetadata != null,\r\n        'Relay: getPaginationMetadata(): Expected fragment `%s` to include a ' +\r\n            'connection when using `%s`. Did you forget to add a @connection ' +\r\n            'directive to the connection field in the fragment?',\r\n        componentDisplayName,\r\n        fragmentNode.name,\r\n    );\r\n    const connectionPathInFragmentData = paginationMetadata.path;\r\n\r\n    const connectionMetadata = (fragmentNode.metadata?.connection ?? [])[0];\r\n    invariant(\r\n        connectionMetadata != null,\r\n        'Relay: getPaginationMetadata(): Expected fragment `%s` to include a ' +\r\n            'connection when using `%s`. Did you forget to add a @connection ' +\r\n            'directive to the connection field in the fragment?',\r\n        componentDisplayName,\r\n        fragmentNode.name,\r\n    );\r\n    const identifierField = refetchMetadata.identifierField;\r\n    invariant(\r\n        identifierField == null || typeof identifierField === 'string',\r\n        'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.',\r\n    );\r\n    return {\r\n        connectionPathInFragmentData,\r\n        identifierField,\r\n        paginationRequest,\r\n        paginationMetadata,\r\n        stream: connectionMetadata.stream === true,\r\n    };\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @emails oncall+relay\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n// flowlint ambiguous-object-type:error\r\n\r\n'use strict';\r\n\r\nimport * as invariant from 'fbjs/lib/invariant';\r\nimport * as warning from 'fbjs/lib/warning';\r\n\r\nimport { ReaderPaginationMetadata, Variables } from 'relay-runtime';\r\n\r\nexport function getPaginationVariables(\r\n    direction: 'forward' | 'backward',\r\n    count: number,\r\n    cursor: string | null,\r\n    baseVariables: Variables,\r\n    extraVariables: Variables,\r\n    paginationMetadata: ReaderPaginationMetadata,\r\n): { [key: string]: any } {\r\n    const { backward: backwardMetadata, forward: forwardMetadata } = paginationMetadata;\r\n\r\n    if (direction === 'backward') {\r\n        invariant(\r\n            backwardMetadata != null &&\r\n                backwardMetadata.count != null &&\r\n                backwardMetadata.cursor != null,\r\n            'Relay: Expected backward pagination metadata to be available. ' +\r\n                \"If you're seeing this, this is likely a bug in Relay.\",\r\n        );\r\n        warning(\r\n            !extraVariables.hasOwnProperty(backwardMetadata.cursor),\r\n            'Relay: `UNSTABLE_extraVariables` provided by caller should not ' +\r\n                'contain cursor variable `%s`. This variable is automatically ' +\r\n                'determined by Relay.',\r\n            backwardMetadata.cursor,\r\n        );\r\n        warning(\r\n            !extraVariables.hasOwnProperty(backwardMetadata.count),\r\n            'Relay: `UNSTABLE_extraVariables` provided by caller should not ' +\r\n                'contain count variable `%s`. This variable is automatically ' +\r\n                'determined by Relay.',\r\n            backwardMetadata.count,\r\n        );\r\n        const paginationVariables = {\r\n            ...baseVariables,\r\n            ...extraVariables,\r\n            [backwardMetadata.cursor]: cursor,\r\n            [backwardMetadata.count]: count,\r\n        };\r\n        if (forwardMetadata && forwardMetadata.cursor) {\r\n            paginationVariables[forwardMetadata.cursor] = null;\r\n        }\r\n        if (forwardMetadata && forwardMetadata.count) {\r\n            paginationVariables[forwardMetadata.count] = null;\r\n        }\r\n        return paginationVariables;\r\n    }\r\n\r\n    invariant(\r\n        forwardMetadata != null && forwardMetadata.count != null && forwardMetadata.cursor != null,\r\n        'Relay: Expected forward pagination metadata to be available. ' +\r\n            \"If you're seeing this, this is likely a bug in Relay.\",\r\n    );\r\n    warning(\r\n        !extraVariables.hasOwnProperty(forwardMetadata.cursor),\r\n        'Relay: `UNSTABLE_extraVariables` provided by caller should not ' +\r\n            'contain cursor variable `%s`. This variable is automatically ' +\r\n            'determined by Relay.',\r\n        forwardMetadata.cursor,\r\n    );\r\n    warning(\r\n        !extraVariables.hasOwnProperty(forwardMetadata.count),\r\n        'Relay: `UNSTABLE_extraVariables` provided by caller should not ' +\r\n            'contain count variable `%s`. This variable is automatically ' +\r\n            'determined by Relay.',\r\n        forwardMetadata.count,\r\n    );\r\n    const paginationVariables = {\r\n        ...baseVariables,\r\n        ...extraVariables,\r\n        [forwardMetadata.cursor]: cursor,\r\n        [forwardMetadata.count]: count,\r\n    };\r\n    if (backwardMetadata && backwardMetadata.cursor) {\r\n        paginationVariables[backwardMetadata.cursor] = null;\r\n    }\r\n    if (backwardMetadata && backwardMetadata.count) {\r\n        paginationVariables[backwardMetadata.count] = null;\r\n    }\r\n    return paginationVariables;\r\n}\r\n","import * as areEqual from 'fbjs/lib/areEqual';\r\nimport * as invariant from 'fbjs/lib/invariant';\r\nimport * as warning from 'fbjs/lib/warning';\r\nimport {\r\n    __internal,\r\n    getSelector,\r\n    IEnvironment,\r\n    Disposable,\r\n    Snapshot,\r\n    Variables,\r\n    getVariablesFromFragment,\r\n    OperationDescriptor,\r\n    getFragmentIdentifier,\r\n    PluralReaderSelector,\r\n    ReaderSelector,\r\n    SingularReaderSelector,\r\n    ReaderFragment,\r\n    getDataIDsFromFragment,\r\n    RequestDescriptor,\r\n} from 'relay-runtime';\r\nimport { Fetcher, fetchResolver } from './FetchResolver';\r\nimport { getConnectionState, getStateFromConnection } from './getConnectionState';\r\nimport { getPaginationMetadata } from './getPaginationMetadata';\r\nimport { getPaginationVariables } from './getPaginationVariables';\r\nimport { getRefetchMetadata } from './getRefetchMetadata';\r\nimport { getValueAtPath } from './getValueAtPath';\r\nimport {\r\n    FragmentNames,\r\n    Options,\r\n    OptionsLoadMore,\r\n    PAGINATION_NAME,\r\n    REFETCHABLE_NAME,\r\n} from './RelayHooksTypes';\r\nimport { createOperation, forceCache } from './Utils';\r\nconst { getPromiseForActiveRequest } = __internal;\r\n\r\ntype SingularOrPluralSnapshot = Snapshot | Array<Snapshot>;\r\n\r\nfunction lookupFragment(environment, selector): SingularOrPluralSnapshot {\r\n    return selector.kind === 'PluralReaderSelector'\r\n        ? selector.selectors.map((s) => environment.lookup(s))\r\n        : environment.lookup(selector);\r\n}\r\n\r\nfunction getFragmentResult(snapshot: SingularOrPluralSnapshot): any {\r\n    const missData = isMissingData(snapshot);\r\n    if (Array.isArray(snapshot)) {\r\n        return { snapshot, data: snapshot.map((s) => s.data), isMissingData: missData };\r\n    }\r\n    return { snapshot, data: snapshot.data, isMissingData: missData };\r\n}\r\n\r\ntype FragmentResult = {\r\n    snapshot?: SingularOrPluralSnapshot | null;\r\n    data: any;\r\n    isMissingData?: boolean;\r\n    owner?: any;\r\n};\r\n\r\nfunction isMissingData(snapshot: SingularOrPluralSnapshot): boolean {\r\n    if (Array.isArray(snapshot)) {\r\n        return snapshot.some((s) => s.isMissingData);\r\n    }\r\n    return snapshot.isMissingData;\r\n}\r\n\r\nfunction getPromiseForPendingOperationAffectingOwner(\r\n    environment: IEnvironment,\r\n    request: RequestDescriptor,\r\n): Promise<void> | null {\r\n    return environment.getOperationTracker().getPromiseForPendingOperationsAffectingOwner(request);\r\n}\r\n\r\nfunction _getAndSavePromiseForFragmentRequestInFlight(\r\n    fragmentOwner: RequestDescriptor,\r\n    environment: IEnvironment,\r\n): Promise<void> | null {\r\n    const networkPromise =\r\n        getPromiseForActiveRequest(environment, fragmentOwner) ??\r\n        getPromiseForPendingOperationAffectingOwner(environment, fragmentOwner);\r\n\r\n    if (!networkPromise) {\r\n        return null;\r\n    }\r\n    return networkPromise;\r\n}\r\n\r\nexport class FragmentResolver {\r\n    _environment: IEnvironment;\r\n    _fragment: ReaderFragment;\r\n    _fragmentRef: any;\r\n    _fragmentRefRefetch: any;\r\n    _idfragment: any;\r\n    _idfragmentrefetch: any;\r\n    resolverData: FragmentResult;\r\n    _disposable: Disposable;\r\n    _selector: ReaderSelector;\r\n    refreshHooks: any;\r\n    fetcherRefecth: Fetcher;\r\n    fetcherNext: Fetcher;\r\n    fetcherPrevious: Fetcher;\r\n    unmounted = false;\r\n    name: string;\r\n    refetchable = false;\r\n    pagination = false;\r\n    result: any;\r\n\r\n    constructor(name: FragmentNames) {\r\n        this.name = name;\r\n        this.pagination = name === PAGINATION_NAME;\r\n        this.refetchable = name === REFETCHABLE_NAME || this.pagination;\r\n\r\n        const setLoading = (_loading): void => this.refreshHooks();\r\n        if (this.refetchable) {\r\n            this.fetcherRefecth = fetchResolver({\r\n                setLoading,\r\n                doRetain: true,\r\n            });\r\n        }\r\n        if (this.pagination) {\r\n            this.fetcherNext = fetchResolver({ setLoading });\r\n            this.fetcherPrevious = fetchResolver({ setLoading });\r\n        }\r\n    }\r\n\r\n    setForceUpdate(forceUpdate: () => void): void {\r\n        this.refreshHooks = (): void => {\r\n            this.resolveResult();\r\n            forceUpdate();\r\n        };\r\n    }\r\n\r\n    setUnmounted(): void {\r\n        this.unmounted = true;\r\n    }\r\n\r\n    isEqualsFragmentRef(prevFragment, fragmentRef): boolean {\r\n        if (this._fragmentRef !== fragmentRef) {\r\n            const prevIDs = getDataIDsFromFragment(this._fragment, prevFragment);\r\n            const nextIDs = getDataIDsFromFragment(this._fragment, fragmentRef);\r\n            if (\r\n                !areEqual(prevIDs, nextIDs) ||\r\n                !areEqual(\r\n                    this.getFragmentVariables(fragmentRef),\r\n                    this.getFragmentVariables(prevFragment),\r\n                )\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    dispose(): void {\r\n        this.unsubscribe();\r\n        this.fetcherNext && this.fetcherNext.dispose();\r\n        this.fetcherPrevious && this.fetcherPrevious.dispose();\r\n        this._idfragmentrefetch = null;\r\n        this._fragmentRefRefetch = null;\r\n        this.fetcherRefecth && this.fetcherRefecth.dispose();\r\n    }\r\n\r\n    getFragmentVariables(fRef = this._fragmentRef): Variables {\r\n        return getVariablesFromFragment(this._fragment, fRef);\r\n    }\r\n\r\n    resolve(\r\n        environment: IEnvironment,\r\n        idfragment: string,\r\n        fragment: ReaderFragment,\r\n        fragmentRef,\r\n    ): void {\r\n        if (\r\n            !this.resolverData ||\r\n            this._environment !== environment ||\r\n            (idfragment !== this._idfragment &&\r\n                (!this._idfragmentrefetch ||\r\n                    (this._idfragmentrefetch && idfragment !== this._idfragmentrefetch)))\r\n        ) {\r\n            this._fragment = fragment;\r\n            this._fragmentRef = fragmentRef;\r\n            this._idfragment = idfragment;\r\n            this._selector = null;\r\n            this.dispose();\r\n            this._environment = environment;\r\n            this.lookup(fragment, this._fragmentRef);\r\n            this.resolveResult();\r\n        }\r\n    }\r\n\r\n    lookup(fragment, fragmentRef): void {\r\n        if (fragmentRef == null) {\r\n            this.resolverData = { data: null };\r\n            return;\r\n        }\r\n        const isPlural =\r\n            fragment.metadata && fragment.metadata.plural && fragment.metadata.plural === true;\r\n        if (isPlural) {\r\n            if (fragmentRef.length === 0) {\r\n                this.resolverData = { data: [] };\r\n                return;\r\n            }\r\n        }\r\n        this._selector = getSelector(fragment, fragmentRef);\r\n        const snapshot = lookupFragment(this._environment, this._selector);\r\n\r\n        this.resolverData = getFragmentResult(snapshot);\r\n        const owner = this._selector\r\n            ? this._selector.kind === 'PluralReaderSelector'\r\n                ? (this._selector as any).selectors[0].owner\r\n                : (this._selector as any).owner\r\n            : null;\r\n        this.resolverData.owner = owner;\r\n        //this.subscribe();\r\n    }\r\n\r\n    checkAndSuspense(suspense): void {\r\n        if (suspense && this.resolverData.isMissingData && this.resolverData.owner) {\r\n            const fragmentOwner = this.resolverData.owner;\r\n            const networkPromise = _getAndSavePromiseForFragmentRequestInFlight(\r\n                fragmentOwner,\r\n                this._environment,\r\n            );\r\n            const parentQueryName = fragmentOwner.node.params.name ?? 'Unknown Parent Query';\r\n            if (networkPromise != null) {\r\n                // When the Promise for the request resolves, we need to make sure to\r\n                // update the cache with the latest data available in the store before\r\n                // resolving the Promise\r\n                const promise = networkPromise\r\n                    .then(() => {\r\n                        if (this._idfragmentrefetch) {\r\n                            this.resolveResult();\r\n                        } else {\r\n                            this._idfragment = null;\r\n                            this.dispose();\r\n                        }\r\n                        //;\r\n                    })\r\n                    .catch((_error: Error) => {\r\n                        if (this._idfragmentrefetch) {\r\n                            this.resolveResult();\r\n                        } else {\r\n                            this._idfragment = null;\r\n                            this.dispose();\r\n                        }\r\n                    });\r\n\r\n                // $FlowExpectedError[prop-missing] Expando to annotate Promises.\r\n                (promise as any).displayName = 'Relay(' + parentQueryName + ')';\r\n                this.unsubscribe();\r\n                this.refreshHooks = (): void => undefined;\r\n                throw promise;\r\n            }\r\n            warning(\r\n                false,\r\n                'Relay: Tried reading fragment `%s` declared in ' +\r\n                    '`%s`, but it has missing data and its parent query `%s` is not ' +\r\n                    'being fetched.\\n' +\r\n                    'This might be fixed by by re-running the Relay Compiler. ' +\r\n                    ' Otherwise, make sure of the following:\\n' +\r\n                    '* You are correctly fetching `%s` if you are using a ' +\r\n                    '\"store-only\" `fetchPolicy`.\\n' +\r\n                    \"* Other queries aren't accidentally fetching and overwriting \" +\r\n                    'the data for this fragment.\\n' +\r\n                    '* Any related mutations or subscriptions are fetching all of ' +\r\n                    'the data for this fragment.\\n' +\r\n                    \"* Any related store updaters aren't accidentally deleting \" +\r\n                    'data for this fragment.',\r\n                this._fragment.name,\r\n                this.name,\r\n                parentQueryName,\r\n                parentQueryName,\r\n            );\r\n        }\r\n        this.fetcherRefecth && this.fetcherRefecth.checkAndSuspense(suspense);\r\n    }\r\n\r\n    getData(): any | null {\r\n        return this.result;\r\n    }\r\n\r\n    resolveResult(): any {\r\n        const { data } = this.resolverData;\r\n        if (this.refetchable || this.pagination) {\r\n            const { isLoading, error } = this.fetcherRefecth.getData();\r\n            const refetch = this.refetch;\r\n            if (!this.pagination) {\r\n                if ('production' !== process.env.NODE_ENV) {\r\n                    getRefetchMetadata(this._fragment, this.name);\r\n                }\r\n                this.result = {\r\n                    data,\r\n                    isLoading,\r\n                    error,\r\n                    refetch,\r\n                };\r\n                return;\r\n            }\r\n            const { connectionPathInFragmentData } = getPaginationMetadata(\r\n                this._fragment,\r\n                this.name,\r\n            );\r\n\r\n            const connection = getValueAtPath(data, connectionPathInFragmentData);\r\n            const { hasMore: hasNext } = getStateFromConnection(\r\n                'forward',\r\n                this._fragment,\r\n                connection,\r\n            );\r\n            const { hasMore: hasPrevious } = getStateFromConnection(\r\n                'backward',\r\n                this._fragment,\r\n                connection,\r\n            );\r\n            const { isLoading: isLoadingNext, error: errorNext } = this.fetcherNext.getData();\r\n            const {\r\n                isLoading: isLoadingPrevious,\r\n                error: errorPrevious,\r\n            } = this.fetcherPrevious.getData();\r\n            this.result = {\r\n                data,\r\n                hasNext,\r\n                isLoadingNext,\r\n                hasPrevious,\r\n                isLoadingPrevious,\r\n                isLoading,\r\n                errorNext,\r\n                errorPrevious,\r\n                error,\r\n                refetch,\r\n                loadNext: this.loadNext,\r\n                loadPrevious: this.loadPrevious,\r\n            };\r\n            return;\r\n        }\r\n        this.result = data;\r\n    }\r\n\r\n    unsubscribe(): void {\r\n        this._disposable && this._disposable.dispose();\r\n    }\r\n\r\n    subscribe(): void {\r\n        const environment = this._environment;\r\n        const renderedSnapshot = this.resolverData.snapshot;\r\n        this.unsubscribe();\r\n        const dataSubscriptions = [];\r\n        if (renderedSnapshot) {\r\n            if (Array.isArray(renderedSnapshot)) {\r\n                renderedSnapshot.forEach((snapshot, idx) => {\r\n                    dataSubscriptions.push(\r\n                        environment.subscribe(snapshot, (latestSnapshot) => {\r\n                            this.resolverData.snapshot[idx] = latestSnapshot;\r\n                            this.resolverData.data[idx] = latestSnapshot.data;\r\n                            this.resolverData.isMissingData = false;\r\n                            this.refreshHooks();\r\n                        }),\r\n                    );\r\n                });\r\n            } else {\r\n                dataSubscriptions.push(\r\n                    environment.subscribe(renderedSnapshot, (latestSnapshot) => {\r\n                        this.resolverData = getFragmentResult(latestSnapshot);\r\n                        this.resolverData.isMissingData = false;\r\n                        this.refreshHooks();\r\n                    }),\r\n                );\r\n            }\r\n        }\r\n\r\n        this._disposable = {\r\n            dispose: (): void => {\r\n                dataSubscriptions.map((s) => s.dispose());\r\n                this._disposable = undefined;\r\n            },\r\n        };\r\n    }\r\n\r\n    refetch = (variables: Variables, options?: Options): Disposable => {\r\n        if (this.unmounted === true) {\r\n            warning(\r\n                false,\r\n                'Relay: Unexpected call to `refetch` on unmounted component for fragment ' +\r\n                    '`%s` in `%s`. It looks like some instances of your component are ' +\r\n                    'still trying to fetch data but they already unmounted. ' +\r\n                    'Please make sure you clear all timers, intervals, ' +\r\n                    'async calls, etc that may trigger a fetch.',\r\n                this._fragment.name,\r\n                this.name,\r\n            );\r\n            return { dispose: (): void => {} };\r\n        }\r\n        if (this._selector == null) {\r\n            warning(\r\n                false,\r\n                'Relay: Unexpected call to `refetch` while using a null fragment ref ' +\r\n                    'for fragment `%s` in `%s`. When calling `refetch`, we expect ' +\r\n                    \"initial fragment data to be non-null. Please make sure you're \" +\r\n                    'passing a valid fragment ref to `%s` before calling ' +\r\n                    '`refetch`, or make sure you pass all required variables to `refetch`.',\r\n                this._fragment.name,\r\n                this.name,\r\n                this.name,\r\n            );\r\n        }\r\n\r\n        const {\r\n            fragmentRefPathInResponse,\r\n            identifierField,\r\n            refetchableRequest,\r\n        } = getRefetchMetadata(this._fragment, this.name);\r\n        const fragmentData = this.getData().data;\r\n        const identifierValue =\r\n            identifierField != null && fragmentData != null && typeof fragmentData === 'object'\r\n                ? fragmentData[identifierField]\r\n                : null;\r\n\r\n        let parentVariables;\r\n        let fragmentVariables;\r\n        if (this._selector == null) {\r\n            parentVariables = {};\r\n            fragmentVariables = {};\r\n        } else if (this._selector.kind === 'PluralReaderSelector') {\r\n            parentVariables =\r\n                (this._selector as PluralReaderSelector).selectors[0]?.owner.variables ?? {};\r\n            fragmentVariables =\r\n                (this._selector as PluralReaderSelector).selectors[0]?.variables ?? {};\r\n        } else {\r\n            parentVariables = (this._selector as SingularReaderSelector).owner.variables;\r\n            fragmentVariables = (this._selector as SingularReaderSelector).variables;\r\n        }\r\n\r\n        // NOTE: A user of `useRefetchableFragment()` may pass a subset of\r\n        // all variables required by the fragment when calling `refetch()`.\r\n        // We fill in any variables not passed by the call to `refetch()` with the\r\n        // variables from the original parent fragment owner.\r\n        /* $FlowFixMe[cannot-spread-indexer] (>=0.123.0) This comment suppresses\r\n         * an error found when Flow v0.123.0 was deployed. To see the error\r\n         * delete this comment and run Flow. */\r\n        const refetchVariables = {\r\n            ...parentVariables,\r\n            /* $FlowFixMe[exponential-spread] (>=0.111.0) This comment suppresses\r\n             * an error found when Flow v0.111.0 was deployed. To see the error,\r\n             * delete this comment and run Flow. */\r\n            ...fragmentVariables,\r\n            ...variables,\r\n        };\r\n\r\n        if (identifierField != null && !variables.hasOwnProperty('id')) {\r\n            // @refetchable fragments are guaranteed to have an `id` selection\r\n            // if the type is Node, implements Node, or is @fetchable. Double-check\r\n            // that there actually is a value at runtime.\r\n            if (typeof identifierValue !== 'string') {\r\n                warning(\r\n                    false,\r\n                    'Relay: Expected result to have a string  ' +\r\n                        '`%s` in order to refetch, got `%s`.',\r\n                    identifierField,\r\n                    identifierValue,\r\n                );\r\n            }\r\n            refetchVariables.id = identifierValue;\r\n        }\r\n\r\n        const onNext = (operation: OperationDescriptor, snapshot: Snapshot): void => {\r\n            const fragmentRef = getValueAtPath(snapshot.data, fragmentRefPathInResponse);\r\n            const isEquals = this.isEqualsFragmentRef(\r\n                this._fragmentRefRefetch || this._fragmentRef,\r\n                fragmentRef,\r\n            );\r\n            const missData = isMissingData(snapshot); //fromStore && isMissingData(snapshot);\r\n            if (!isEquals || missData) {\r\n                this._fragmentRefRefetch = fragmentRef;\r\n                this._idfragmentrefetch = getFragmentIdentifier(this._fragment, fragmentRef);\r\n                this.lookup(this._fragment, fragmentRef);\r\n                this.subscribe();\r\n                /*if (!missData) {\r\n                    this.subscribe();\r\n                }*/\r\n                this.resolverData.isMissingData = missData;\r\n                this.resolverData.owner = operation.request;\r\n                this.refreshHooks();\r\n            }\r\n        };\r\n        if (this.pagination) {\r\n            this.fetcherNext.dispose();\r\n            this.fetcherPrevious.dispose();\r\n        }\r\n        const operation = createOperation(refetchableRequest, refetchVariables, forceCache);\r\n        return this.fetcherRefecth.fetch(\r\n            this._environment,\r\n            operation,\r\n            options?.fetchPolicy,\r\n            options?.onComplete,\r\n            onNext,\r\n            options?.UNSTABLE_renderPolicy,\r\n        );\r\n    };\r\n\r\n    loadPrevious = (count: number, options?: OptionsLoadMore): Disposable => {\r\n        return this.loadMore('backward', count, options);\r\n    };\r\n\r\n    loadNext = (count: number, options?: OptionsLoadMore): Disposable => {\r\n        return this.loadMore('forward', count, options);\r\n    };\r\n\r\n    loadMore = (\r\n        direction: 'backward' | 'forward',\r\n        count: number,\r\n        options?: OptionsLoadMore,\r\n    ): Disposable => {\r\n        const onComplete = options?.onComplete ?? ((): void => undefined);\r\n\r\n        const fragmentData = this.getData().data;\r\n\r\n        const fetcher = direction === 'backward' ? this.fetcherPrevious : this.fetcherNext;\r\n        if (this.unmounted === true) {\r\n            // Bail out and warn if we're trying to paginate after the component\r\n            // has unmounted\r\n            warning(\r\n                false,\r\n                'Relay: Unexpected fetch on unmounted component for fragment ' +\r\n                    '`%s` in `%s`. It looks like some instances of your component are ' +\r\n                    'still trying to fetch data but they already unmounted. ' +\r\n                    'Please make sure you clear all timers, intervals, ' +\r\n                    'async calls, etc that may trigger a fetch.',\r\n                this._fragment.name,\r\n                this.name,\r\n            );\r\n            return { dispose: (): void => {} };\r\n        }\r\n        if (this._selector == null) {\r\n            warning(\r\n                false,\r\n                'Relay: Unexpected fetch while using a null fragment ref ' +\r\n                    'for fragment `%s` in `%s`. When fetching more items, we expect ' +\r\n                    \"initial fragment data to be non-null. Please make sure you're \" +\r\n                    'passing a valid fragment ref to `%s` before paginating.',\r\n                this._fragment.name,\r\n                this.name,\r\n                this.name,\r\n            );\r\n            onComplete(null);\r\n            return { dispose: (): void => {} };\r\n        }\r\n        const isRequestActive = (this._environment as any).isRequestActive(\r\n            (this._selector as SingularReaderSelector).owner.identifier,\r\n        );\r\n        if (isRequestActive || fetcher.getData().isLoading === true || fragmentData == null) {\r\n            onComplete(null);\r\n            return { dispose: (): void => {} };\r\n        }\r\n        invariant(\r\n            this._selector != null && this._selector.kind !== 'PluralReaderSelector',\r\n            'Relay: Expected to be able to find a non-plural fragment owner for ' +\r\n                \"fragment `%s` when using `%s`. If you're seeing this, \" +\r\n                'this is likely a bug in Relay.',\r\n            this._fragment.name,\r\n            this.name,\r\n        );\r\n\r\n        const {\r\n            paginationRequest,\r\n            paginationMetadata,\r\n            identifierField,\r\n            connectionPathInFragmentData,\r\n        } = getPaginationMetadata(this._fragment, this.name);\r\n        const identifierValue =\r\n            identifierField != null && fragmentData != null && typeof fragmentData === 'object'\r\n                ? fragmentData[identifierField]\r\n                : null;\r\n\r\n        const parentVariables = (this._selector as SingularReaderSelector).owner.variables;\r\n        const fragmentVariables = (this._selector as SingularReaderSelector).variables;\r\n        const extraVariables = options?.UNSTABLE_extraVariables;\r\n        const baseVariables = {\r\n            ...parentVariables,\r\n            ...fragmentVariables,\r\n        };\r\n        const { cursor } = getConnectionState(\r\n            direction,\r\n            this._fragment,\r\n            fragmentData,\r\n            connectionPathInFragmentData,\r\n        );\r\n        const paginationVariables = getPaginationVariables(\r\n            direction,\r\n            count,\r\n            cursor,\r\n            baseVariables,\r\n            { ...extraVariables },\r\n            paginationMetadata,\r\n        );\r\n\r\n        // If the query needs an identifier value ('id' or similar) and one\r\n        // was not explicitly provided, read it from the fragment data.\r\n        if (identifierField != null) {\r\n            // @refetchable fragments are guaranteed to have an `id` selection\r\n            // if the type is Node, implements Node, or is @fetchable. Double-check\r\n            // that there actually is a value at runtime.\r\n            if (typeof identifierValue !== 'string') {\r\n                warning(\r\n                    false,\r\n                    'Relay: Expected result to have a string  ' +\r\n                        '`%s` in order to refetch, got `%s`.',\r\n                    identifierField,\r\n                    identifierValue,\r\n                );\r\n            }\r\n            paginationVariables.id = identifierValue;\r\n        }\r\n\r\n        const onNext = (): void => {};\r\n\r\n        const operation = createOperation(paginationRequest, paginationVariables, forceCache);\r\n        return fetcher.fetch(\r\n            this._environment,\r\n            operation,\r\n            undefined, //options?.fetchPolicy,\r\n            onComplete,\r\n            onNext,\r\n        );\r\n    };\r\n}\r\n","import * as warning from 'fbjs/lib/warning';\r\nimport { useEffect, useRef, useMemo } from 'react';\r\nimport { GraphQLTaggedNode, getFragmentIdentifier, getFragment } from 'relay-runtime';\r\nimport { FragmentResolver } from './FragmentResolver';\r\nimport { FragmentNames } from './RelayHooksTypes';\r\nimport { useForceUpdate } from './useForceUpdate';\r\nimport { useRelayEnvironment } from './useRelayEnvironment';\r\n\r\nexport function useOssFragment(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: any | null,\r\n    suspense: boolean,\r\n    name: FragmentNames,\r\n): any {\r\n    const environment = useRelayEnvironment();\r\n    const forceUpdate = useForceUpdate();\r\n    const ref = useRef<{ resolver: FragmentResolver }>(null);\r\n    if (ref.current === null || ref.current === undefined) {\r\n        ref.current = {\r\n            resolver: new FragmentResolver(name),\r\n        };\r\n    }\r\n\r\n    const { resolver } = ref.current;\r\n\r\n    useEffect(() => {\r\n        return (): void => {\r\n            ref.current.resolver.setUnmounted();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return (): void => {\r\n            resolver.dispose();\r\n        };\r\n    }, [resolver]);\r\n\r\n    const fragment = useMemo(() => {\r\n        return getFragment(fragmentNode);\r\n    }, [fragmentNode]);\r\n\r\n    const idfragment = useMemo(() => {\r\n        return getFragmentIdentifier(fragment, fragmentRef);\r\n    }, [fragment, fragmentRef]);\r\n\r\n    useEffect(() => {\r\n        resolver.subscribe();\r\n        return (): void => {\r\n            resolver.unsubscribe();\r\n        };\r\n    }, [resolver, idfragment, environment]);\r\n\r\n    resolver.resolve(environment, idfragment, fragment, fragmentRef);\r\n\r\n    resolver.checkAndSuspense(suspense);\r\n    resolver.setForceUpdate(forceUpdate);\r\n\r\n    const data = resolver.getData();\r\n\r\n    if ('production' !== process.env.NODE_ENV) {\r\n        if (\r\n            fragmentRef != null &&\r\n            (data === undefined ||\r\n                (Array.isArray(data) &&\r\n                    data.length > 0 &&\r\n                    data.every((data) => data === undefined)))\r\n        ) {\r\n            warning(\r\n                false,\r\n                'Relay: Expected to have been able to read non-null data for ' +\r\n                    'fragment `%s` declared in ' +\r\n                    '`%s`, since fragment reference was non-null. ' +\r\n                    \"Make sure that that `%s`'s parent isn't \" +\r\n                    'holding on to and/or passing a fragment reference for data that ' +\r\n                    'has been deleted.',\r\n                fragment,\r\n                name,\r\n                name,\r\n            );\r\n        }\r\n    }\r\n\r\n    return [data, resolver];\r\n}\r\n","import { GraphQLTaggedNode } from 'relay-runtime';\r\nimport {\r\n    KeyType,\r\n    KeyReturnType,\r\n    $Call,\r\n    ArrayKeyType,\r\n    ArrayKeyReturnType,\r\n    FRAGMENT_NAME,\r\n} from './RelayHooksTypes';\r\nimport { useOssFragment } from './useOssFragment';\r\n\r\nexport function useFragment<TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): $Call<KeyReturnType<TKey>>;\r\nexport function useFragment<TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): $Call<KeyReturnType<TKey>> | null;\r\nexport function useFragment<TKey extends ArrayKeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>;\r\nexport function useFragment<TKey extends ArrayKeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> {\r\n    const [data] = useOssFragment(fragmentNode, fragmentRef, false, FRAGMENT_NAME);\r\n    return data;\r\n}\r\n\r\nexport function useSuspenseFragment<TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): $Call<KeyReturnType<TKey>>;\r\nexport function useSuspenseFragment<TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): $Call<KeyReturnType<TKey>> | null;\r\nexport function useSuspenseFragment<TKey extends ArrayKeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>>;\r\nexport function useSuspenseFragment<TKey extends ArrayKeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): ReadonlyArray<$Call<ArrayKeyReturnType<TKey>>> {\r\n    const [data] = useOssFragment(fragmentNode, fragmentRef, true, FRAGMENT_NAME);\r\n    return data;\r\n}\r\n","import useMounted from '@restart/hooks/useMounted';\r\nimport * as invariant from 'fbjs/lib/invariant';\r\nimport * as React from 'react';\r\nimport { Environment, MutationParameters, commitMutation } from 'relay-runtime';\r\nimport {\r\n    MutationNode,\r\n    MutationConfig,\r\n    MutationConfigWithoutVariables,\r\n    MutationState,\r\n    Mutate,\r\n    MutateWithVariables,\r\n} from './RelayHooksTypes';\r\nimport { useRelayEnvironment } from './useRelayEnvironment';\r\n\r\nconst { useCallback, useState } = React;\r\n\r\nexport function useMutation<T extends MutationParameters>(\r\n    mutation: MutationNode<T>,\r\n    userConfig?: MutationConfigWithoutVariables<T>,\r\n    /** if not provided, the context environment will be used. */\r\n    environment?: Environment,\r\n): [MutateWithVariables<T>, MutationState<T>];\r\nexport function useMutation<T extends MutationParameters>(\r\n    mutation: MutationNode<T>,\r\n    userConfig?: MutationConfig<T>,\r\n    /** if not provided, the context environment will be used. */\r\n    environment?: Environment,\r\n): [Mutate<T>, MutationState<T>];\r\nexport function useMutation<T extends MutationParameters>(\r\n    mutation: MutationNode<T>,\r\n    userConfig: MutationConfig<T> = {},\r\n    /** if not provided, the context environment will be used. */\r\n    environment?: Environment,\r\n): [Mutate<T>, MutationState<T>] {\r\n    const [state, setState] = useState<MutationState<T>>({\r\n        loading: false,\r\n        data: null,\r\n        error: null,\r\n    });\r\n\r\n    const isMounted = useMounted();\r\n\r\n    const relayEnvironment = useRelayEnvironment();\r\n    const resolvedEnvironment = environment || relayEnvironment;\r\n    const {\r\n        configs,\r\n        variables,\r\n        uploadables,\r\n        onCompleted,\r\n        onError,\r\n        optimisticUpdater,\r\n        optimisticResponse,\r\n        updater,\r\n    } = userConfig;\r\n\r\n    const mutate: Mutate<T> = useCallback(\r\n        (config) => {\r\n            const mergedConfig = {\r\n                configs,\r\n                variables,\r\n                uploadables,\r\n                onCompleted,\r\n                onError,\r\n                optimisticUpdater,\r\n                optimisticResponse,\r\n                updater,\r\n                ...config,\r\n            };\r\n\r\n            invariant(mergedConfig.variables, 'you must specify variables');\r\n\r\n            if (isMounted()) {\r\n                setState({\r\n                    loading: true,\r\n                    data: mergedConfig.optimisticResponse,\r\n                    error: null,\r\n                });\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                function handleError(error: any): void {\r\n                    if (isMounted()) {\r\n                        setState({\r\n                            loading: false,\r\n                            data: null,\r\n                            error,\r\n                        });\r\n                    }\r\n\r\n                    if (mergedConfig.onError) {\r\n                        mergedConfig.onError(error);\r\n                        resolve(null);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                }\r\n\r\n                commitMutation(resolvedEnvironment, {\r\n                    ...mergedConfig,\r\n                    mutation,\r\n                    variables: mergedConfig.variables,\r\n                    onCompleted: (response, errors) => {\r\n                        if (errors) {\r\n                            // FIXME: This isn't right. onError expects a single error.\r\n                            handleError(errors);\r\n                            return;\r\n                        }\r\n\r\n                        if (isMounted()) {\r\n                            setState({\r\n                                loading: false,\r\n                                data: response,\r\n                                error: null,\r\n                            });\r\n                        }\r\n\r\n                        if (mergedConfig.onCompleted) {\r\n                            mergedConfig.onCompleted(response);\r\n                        }\r\n                        resolve(response);\r\n                    },\r\n                    onError: handleError,\r\n                });\r\n            });\r\n        },\r\n        [\r\n            resolvedEnvironment,\r\n            configs,\r\n            mutation,\r\n            variables,\r\n            uploadables,\r\n            onCompleted,\r\n            onError,\r\n            optimisticUpdater,\r\n            optimisticResponse,\r\n            updater,\r\n            isMounted,\r\n        ],\r\n    );\r\n\r\n    return [mutate, state];\r\n}\r\n","import { useEffect } from 'react';\r\nimport { GraphQLSubscriptionConfig, requestSubscription, OperationType } from 'relay-runtime';\r\nimport {\r\n    SkipGraphQLSubscriptionConfig,\r\n    SkipSubscriptionConfig,\r\n    SubscriptionConfig,\r\n} from './RelayHooksTypes';\r\nimport { useRelayEnvironment } from './useRelayEnvironment';\r\n\r\nexport function useSubscription<TSubscriptionPayload extends OperationType = OperationType>(\r\n    config: GraphQLSubscriptionConfig<TSubscriptionPayload>,\r\n    opts?: SubscriptionConfig,\r\n): void;\r\nexport function useSubscription<TSubscriptionPayload extends OperationType = OperationType>(\r\n    config: SkipGraphQLSubscriptionConfig<TSubscriptionPayload>,\r\n    opts: SkipSubscriptionConfig,\r\n): void;\r\nexport function useSubscription<TSubscriptionPayload extends OperationType = OperationType>(\r\n    config: GraphQLSubscriptionConfig<TSubscriptionPayload>,\r\n    opts?: SubscriptionConfig,\r\n): void {\r\n    const environment = useRelayEnvironment();\r\n    const skip = opts && opts.skip;\r\n\r\n    useEffect(() => {\r\n        if (skip) {\r\n            return;\r\n        }\r\n        const { dispose } = requestSubscription(environment, config);\r\n        return dispose;\r\n    }, [environment, config, skip]);\r\n}\r\n","import { GraphQLTaggedNode, OperationType } from 'relay-runtime';\r\nimport {\r\n    KeyType,\r\n    KeyTypeData,\r\n    PAGINATION_NAME,\r\n    ReturnTypePagination,\r\n    ReturnTypePaginationSuspense,\r\n} from './RelayHooksTypes';\r\nimport { useOssFragment } from './useOssFragment';\r\n\r\nexport function usePagination<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypePagination<TQuery, TKey, KeyTypeData<TKey>>;\r\nexport function usePagination<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypePagination<TQuery, TKey | null, KeyTypeData<TKey> | null> {\r\n    const [data] = useOssFragment(fragmentNode, fragmentRef, false, PAGINATION_NAME);\r\n    return data;\r\n}\r\n\r\nexport function usePaginationFragment<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypePaginationSuspense<TQuery, TKey, KeyTypeData<TKey>>;\r\nexport function usePaginationFragment<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentNode: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypePaginationSuspense<TQuery, TKey | null, KeyTypeData<TKey> | null> {\r\n    const [data] = useOssFragment(fragmentNode, fragmentRef, true, PAGINATION_NAME);\r\n    return data;\r\n}\r\n","import { GraphQLTaggedNode, OperationType } from 'relay-runtime';\r\nimport {\r\n    KeyType,\r\n    KeyTypeData,\r\n    REFETCHABLE_NAME,\r\n    ReturnTypeRefetchNode,\r\n    ReturnTypeRefetchSuspenseNode,\r\n} from './RelayHooksTypes';\r\nimport { useOssFragment } from './useOssFragment';\r\n\r\nexport function useRefetchable<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentInput: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypeRefetchNode<TQuery, TKey, KeyTypeData<TKey>>;\r\nexport function useRefetchable<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentInput: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypeRefetchNode<TQuery, TKey, KeyTypeData<TKey> | null> {\r\n    const [data] = useOssFragment(fragmentInput, fragmentRef, false, REFETCHABLE_NAME);\r\n    return data;\r\n}\r\n\r\nexport function useRefetchableFragment<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentInput: GraphQLTaggedNode,\r\n    fragmentRef: TKey,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypeRefetchSuspenseNode<TQuery, TKey, KeyTypeData<TKey>>;\r\nexport function useRefetchableFragment<TQuery extends OperationType, TKey extends KeyType>(\r\n    fragmentInput: GraphQLTaggedNode,\r\n    fragmentRef: TKey | null,\r\n): // tslint:disable-next-line no-unnecessary-generics\r\nReturnTypeRefetchSuspenseNode<TQuery, TKey, KeyTypeData<TKey> | null> {\r\n    const [data] = useOssFragment(fragmentInput, fragmentRef, true, REFETCHABLE_NAME);\r\n    return data;\r\n}\r\n","import * as React from 'react';\r\nimport { Environment } from 'relay-runtime';\r\nimport { ReactRelayContext } from './ReactRelayContext'; // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\nexport const RelayEnvironmentProvider = function<\r\n    TEnvironment extends Environment = Environment\r\n>(props: { children: React.ReactNode; environment: TEnvironment }): JSX.Element {\r\n    const context = React.useMemo(() => ({ environment: props.environment }), [props.environment]);\r\n    return (\r\n        <ReactRelayContext.Provider value={context}>{props.children}</ReactRelayContext.Provider>\r\n    );\r\n};\r\n"],"names":["createRelayContext","ReactRelayContext","React","NETWORK_ONLY","STORE_THEN_NETWORK","STORE_OR_NETWORK","STORE_ONLY","PAGINATION_NAME","REFETCHABLE_NAME","FRAGMENT_NAME","FORWARD","isNetworkPolicy","policy","full","isStorePolicy","forceCache","force","createOperation","gqlQuery","variables","cacheConfig","createOperationDescriptor","getRequest","fetchQuery","DATA_RETENTION_TIMEOUT","fetchResolver","_a","setLoading","_b","doRetain","disposeTemporary","_refetchSubscription","disposable","releaseQueryTimeout","isLoading","query","promise","error","env","updateLoading","loading","lookupInStore","environment","operation","fetchPolicy","renderPolicy","check","queryStatus","status","hasFullQuery","canPartialRender","snapshot","lookup","fragment","dispose","clearTemporaryRetain","disposeRequest","clearTimeout","temporaryRetain","localReleaseTemporaryRetain","setTimeout","unsubscribe","fetch","onComplete","onNext","_e","undefined","request","identifier","retain","isNetwork","onlyStore","resolveNetworkPromise_1","refetchSubscription_1","cleanup_1","subscribe","complete","e","next","store","poll","start","subscription","Promise","resolve","checkAndSuspense","suspense","useLazy","toThrow","getData","defaultPolicy","cache","Map","getOrCreateQueryFetcher","networkCacheConfig","toGet","has","queryFetcher","get","QueryFetcher","setQuery","emptyforceUpdate","cacheConfigOverride","options","_this","node","resolveResult","forceUpdate","result","retry","data","fetcher","delete","disposeSnapshot","rootSubscription","skip","fetchHasReturned","_o","areEqual","getQuery","fetchKey","diffQuery","setForceUpdate","set","useForceUpdate","useRelayEnvironment","useInternalQuery","ref","useRef","current","useEffect","useQuery","useLazyLoadQuery","emptyFunction","internalLoadQuery","Error","reject","getValue","resolveEnvironment","callback","getForceUpdate","loadLazyQuery","loadQuery","usePreloadedQuery","getValueAtPath","path","path_1","_i","key","Array","isArray","invariant","getStateFromConnection","direction","fragmentNode","connection","cursor","hasMore","_c","EDGES","PAGE_INFO","HAS_NEXT_PAGE","HAS_PREV_PAGE","END_CURSOR","START_CURSOR","name","edges","pageInfo","getConnectionState","fragmentData","connectionPathInFragmentData","getRefetchMetadata","componentDisplayName","metadata","plural","refetchMetadata","refetch","refetchableRequest","default","fragmentRefPathInResponse","fragmentPathInResult","identifierField","getPaginationMetadata","paginationRequest","paginationMetadata","connectionMetadata","stream","getPaginationVariables","count","baseVariables","extraVariables","backwardMetadata","forwardMetadata","warning","hasOwnProperty","paginationVariables_1","paginationVariables","getPromiseForActiveRequest","lookupFragment","selector","kind","selectors","map","s","getFragmentResult","missData","isMissingData","some","getPromiseForPendingOperationAffectingOwner","getOperationTracker","getPromiseForPendingOperationsAffectingOwner","_getAndSavePromiseForFragmentRequestInFlight","fragmentOwner","networkPromise","unmounted","_fragment","_selector","identifierValue","parentVariables","fragmentVariables","owner","refetchVariables","id","fragmentRef","isEquals","isEqualsFragmentRef","_fragmentRefRefetch","_fragmentRef","_idfragmentrefetch","getFragmentIdentifier","resolverData","refreshHooks","pagination","fetcherNext","fetcherPrevious","fetcherRefecth","_environment","UNSTABLE_renderPolicy","loadMore","isRequestActive","UNSTABLE_extraVariables","refetchable","_loading","FragmentResolver","prevFragment","prevIDs","getDataIDsFromFragment","nextIDs","getFragmentVariables","fRef","getVariablesFromFragment","idfragment","_idfragment","isPlural","length","getSelector","parentQueryName","params","then","catch","_error","displayName","hasNext","hasPrevious","isLoadingNext","errorNext","isLoadingPrevious","errorPrevious","loadNext","loadPrevious","_disposable","renderedSnapshot","dataSubscriptions","forEach","idx","push","latestSnapshot","useOssFragment","resolver","setUnmounted","useMemo","getFragment","every","useFragment","useSuspenseFragment","useCallback","useState","useMutation","mutation","userConfig","state","setState","isMounted","useMounted","relayEnvironment","resolvedEnvironment","configs","uploadables","onCompleted","onError","optimisticUpdater","optimisticResponse","updater","mutate","config","mergedConfig","handleError","commitMutation","response","errors","useSubscription","opts","usePagination","usePaginationFragment","useRefetchable","fragmentInput","useRefetchableFragment","RelayEnvironmentProvider","props","context","Provider","value","children"],"mappings":"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"}